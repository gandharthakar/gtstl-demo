!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.GTToken=t():e.GTToken=t()}(this,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{default:()=>n});class r extends Error{constructor(e){super(e),this.name="TokenError"}}const n=class{constructor(e){this.encoder=new TextEncoder,this.decoder=new TextDecoder,this.secretKey=null,this.initializeKey(e)}async initializeKey(e){const t=await crypto.subtle.importKey("raw",this.encoder.encode(e),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]);this.secretKey=await crypto.subtle.deriveKey({name:"PBKDF2",salt:this.encoder.encode("secure-token-salt"),iterations:1e5,hash:"SHA-256"},t,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}async waitForKey(){for(;null===this.secretKey;)await new Promise((e=>setTimeout(e,10)));return this.secretKey}async encrypt(e,t={}){try{const r=await this.waitForKey(),n=crypto.getRandomValues(new Uint8Array(12)),o={data:e,iat:Math.floor(Date.now()/1e3)};t.expiresIn&&(o.exp=o.iat+t.expiresIn);const a=await crypto.subtle.encrypt({name:"AES-GCM",iv:n},r,this.encoder.encode(JSON.stringify(o))),i=new Uint8Array(n.length+new Uint8Array(a).length);return i.set(n),i.set(new Uint8Array(a),n.length),btoa(String.fromCharCode(...i))}catch(e){throw new r(`Encryption failed: ${e.message}`)}}async decrypt(e){try{const t=await this.waitForKey(),n=new Uint8Array(atob(e).split("").map((e=>e.charCodeAt(0)))),o=n.slice(0,12),a=n.slice(12),i=await crypto.subtle.decrypt({name:"AES-GCM",iv:o},t,a),s=JSON.parse(this.decoder.decode(i)),c=Math.floor(Date.now()/1e3);if(s.exp&&c>s.exp)throw new r("Token has expired");return s.data}catch(e){if(e instanceof r)throw e;throw new r(`Decryption failed: ${e.message}`)}}async verify(e){try{const t=await this.waitForKey(),r=new Uint8Array(atob(e).split("").map((e=>e.charCodeAt(0)))),n=r.slice(0,12),o=r.slice(12),a=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},t,o),i=JSON.parse(this.decoder.decode(a)),s=Math.floor(Date.now()/1e3);return!(i.exp&&s>i.exp)}catch{return!1}}};return t=t.default})()));
//# sourceMappingURL=gt-token.js.map