{"version":3,"file":"gt-secure-token.js","mappings":"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","sources":["webpack://GTSecureToken/webpack/universalModuleDefinition","webpack://GTSecureToken/webpack/bootstrap","webpack://GTSecureToken/webpack/runtime/define property getters","webpack://GTSecureToken/webpack/runtime/hasOwnProperty shorthand","webpack://GTSecureToken/./src/types.ts","webpack://GTSecureToken/./src/browser.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GTSecureToken\"] = factory();\n\telse\n\t\troot[\"GTSecureToken\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class TokenError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'TokenError';\n    }\n}\n","import { TokenError } from './types';\nexport class SecureToken {\n    constructor(secretKey) {\n        this.encoder = new TextEncoder();\n        this.decoder = new TextDecoder();\n        this.secretKey = null;\n        this.initializeKey(secretKey);\n    }\n    async initializeKey(secretKey) {\n        const keyMaterial = await crypto.subtle.importKey('raw', this.encoder.encode(secretKey), { name: 'PBKDF2' }, false, ['deriveBits', 'deriveKey']);\n        this.secretKey = await crypto.subtle.deriveKey({\n            name: 'PBKDF2',\n            salt: this.encoder.encode('secure-token-salt'),\n            iterations: 100000,\n            hash: 'SHA-256'\n        }, keyMaterial, { name: 'AES-GCM', length: 256 }, true, ['encrypt', 'decrypt']);\n    }\n    async waitForKey() {\n        while (this.secretKey === null) {\n            await new Promise(resolve => setTimeout(resolve, 10));\n        }\n        return this.secretKey;\n    }\n    async encrypt(data, options = {}) {\n        try {\n            const key = await this.waitForKey();\n            const iv = crypto.getRandomValues(new Uint8Array(12));\n            const payload = {\n                data,\n                iat: Math.floor(Date.now() / 1000),\n            };\n            if (options.expiresIn) {\n                payload.exp = payload.iat + options.expiresIn;\n            }\n            const encrypted = await crypto.subtle.encrypt({\n                name: 'AES-GCM',\n                iv: iv\n            }, key, this.encoder.encode(JSON.stringify(payload)));\n            const combined = new Uint8Array(iv.length + new Uint8Array(encrypted).length);\n            combined.set(iv);\n            combined.set(new Uint8Array(encrypted), iv.length);\n            return btoa(String.fromCharCode(...combined));\n        }\n        catch (error) {\n            throw new TokenError(`Encryption failed: ${error.message}`);\n        }\n    }\n    async decrypt(token) {\n        try {\n            const key = await this.waitForKey();\n            const combined = new Uint8Array(atob(token)\n                .split('')\n                .map(char => char.charCodeAt(0)));\n            const iv = combined.slice(0, 12);\n            const encrypted = combined.slice(12);\n            const decrypted = await crypto.subtle.decrypt({\n                name: 'AES-GCM',\n                iv: iv\n            }, key, encrypted);\n            const payload = JSON.parse(this.decoder.decode(decrypted));\n            const currentTime = Math.floor(Date.now() / 1000);\n            if (payload.exp && currentTime > payload.exp) {\n                throw new TokenError('Token has expired');\n            }\n            return payload.data;\n        }\n        catch (error) {\n            if (error instanceof TokenError) {\n                throw error;\n            }\n            throw new TokenError(`Decryption failed: ${error.message}`);\n        }\n    }\n    async verify(token) {\n        try {\n            const key = await this.waitForKey();\n            const combined = new Uint8Array(atob(token)\n                .split('')\n                .map(char => char.charCodeAt(0)));\n            const iv = combined.slice(0, 12);\n            const encrypted = combined.slice(12);\n            const decrypted = await crypto.subtle.decrypt({\n                name: 'AES-GCM',\n                iv: iv\n            }, key, encrypted);\n            const payload = JSON.parse(this.decoder.decode(decrypted));\n            const currentTime = Math.floor(Date.now() / 1000);\n            if (payload.exp && currentTime > payload.exp) {\n                return false; // Token has expired\n            }\n            return true; // Token is valid\n        }\n        catch {\n            return false; // Any error means the token is invalid\n        }\n    }\n}\nexport default SecureToken;\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","TokenError","Error","constructor","message","super","name","secretKey","encoder","TextEncoder","decoder","TextDecoder","initializeKey","keyMaterial","crypto","subtle","importKey","encode","deriveKey","salt","iterations","hash","length","waitForKey","Promise","resolve","setTimeout","encrypt","data","options","iv","getRandomValues","Uint8Array","payload","iat","Math","floor","Date","now","expiresIn","exp","encrypted","JSON","stringify","combined","set","btoa","String","fromCharCode","error","decrypt","token","atob","split","map","char","charCodeAt","slice","decrypted","parse","decode","currentTime","verify"],"sourceRoot":""}